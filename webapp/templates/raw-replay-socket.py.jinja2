{#
  Copyright (C) 2024  ANSSI
  SPDX-License-Identifier: GPL-3.0-only
#}
{#- Get service name from dest_ipport #}
{%- set ns = namespace(service_name="unknown") %}
{%- for name, ipaddr_ports in services.items() %}
{%- if data.dest_ipport in ipaddr_ports %}
{%- set ns.service_name = name + "-" + (data.port | string) %}
{%- endif %}
{%- endfor -%}
#!/usr/bin/env python3
# Filename: replay-{{ ns.service_name }}-{{ data.flow_id }}.py
import json
import os
import sys
import socket

"""
This file was generated from network capture towards {{ data.ip }} ({{ data.proto }}).
Corresponding flow id: {{ data.flow_id }}
Service: {{ ns.service_name }}
"""

# Load arguments
# EXTRA is an array of the flagids for current service and team
if len(sys.argv) < 2:
    print(f'Usage: {sys.argv[0]} <target> [flag_id]')
    sys.exit(1)
HOST = sys.argv[1]
if len(sys.argv) > 2:
    EXTRA = json.loads(bytes.fromhex(sys.argv[2]).decode())
else:
    EXTRA = []

# Timeout is important to prevent stall
socket.setdefaulttimeout(2)

# Run the actual exploit
{%- if data.proto == "TCP" %}
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
{%- else %}
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
{%- endif %}
s.connect((HOST, {{ data.port }}))

# FIXME: You should identify if a flag_id was used in the following
# payload. If it is the case, then you should loop using EXTRA.
#for flag_id in EXTRA:
{%- for payload, server_to_client in data.raw_data %}
{%- if server_to_client == 0 %}

s.sendall({{ payload | safe }})
{%- else %}

data = b""
while not data.endswith({{ payload[-16:] | safe }}):
    data += s.recv(1024)
print(data, flush=True)
{%- endif %}
{%- endfor %}

s.close()
