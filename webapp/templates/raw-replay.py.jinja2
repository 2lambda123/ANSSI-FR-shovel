{#
  Copyright (C) 2024  ANSSI
  SPDX-License-Identifier: GPL-3.0-only
#}
{#- Get service name from dest_ipport #}
{%- set ns = namespace(service_name="unknown") %}
{%- for name, ipaddr_ports in services.items() %}
{%- if data.dest_ipport in ipaddr_ports %}
{%- set ns.service_name = name + "-" + (data.port | string) %}
{%- endif %}
{%- endfor -%}
#!/usr/bin/env python3
# Filename: replay-{{ ns.service_name }}-{{ data.flow_id }}.py
import json
import os

from pwn import *

"""
This file was generated from network capture towards {{ data.ip }} ({{ data.proto }}).
Corresponding flow id: {{ data.flow_id }}
Service: {{ ns.service_name }}
"""

# Set logging level
context.log_level = "DEBUG"  # or INFO, WARNING, ERROR

# Load arguments
# EXTRA is an array of the flagids for current service and team
if len(sys.argv) < 2:
    print(f'Usage: {sys.argv[0]} <target> [flag_id]')
    sys.exit(1)
HOST = sys.argv[1]
if len(sys.argv) > 2:
    EXTRA = json.loads(bytes.fromhex(sys.argv[2]).decode())
else:
    EXTRA = []

# Connect to remote and run the actual exploit
# Timeout is important to prevent stall
r = remote(HOST, {{ data.port }}, typ="{{ data.proto | lower }}", timeout=2)

# FIXME: You should identify if a flag_id was used in the following
# payload. If it is the case, then you should loop using EXTRA.
# for flag_id in EXTRA:
{%- for payload, server_to_client in data.raw_data %}
{%-   if server_to_client == 0 %}
{%-     if payload and payload[-1] == 10 %}
r.sendline({{ payload[:-1] | safe }})
{%-     else %}
r.send({{ payload | safe }})
{%-     endif %}
{%-   else %}
data = r.recvuntil({{ payload[-16:] | safe }})
{%-   endif %}
{%- endfor %}

# Use the following to capture all remaining bytes:
# data = r.recvall(timeout=5)
# print(data, flush=True)

r.close()
